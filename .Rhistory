if(numOfSub == 0) {numOfSub = length(unique(ribbondata$sub))}
if(length(factors) == 1){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'mean')", sep="")))
}
else if(length(factors) == 2){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'mean')", sep="")))
}else{
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'mean')", sep="")))
}
std_data$data_y = std_data$data_y / sqrt(numOfSub)
ribbondata$SE_min <- ribbondata$data_y - std_data$data_y
ribbondata$SE_max <- ribbondata$data_y + std_data$data_y
# , color = ", factors[1],, color = ", factors[1],aes(shape = ", factors[2],"),
if(length(factors) == 1){
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y))", sep="")))
eval(parse(text=paste("p = p + geom_point(size = 3, color='black')", sep="")))
} else if(length(factors) == 2){
# , shape =  factors[2],
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[2],", y = data_y",
",group = ",factors[2],
"))", sep="")))
eval(parse(text=paste("p = p + geom_point(aes(color = ",factors[2],", fill = ",factors[2],"),size = 3, shape=21)", sep="")))
} else{
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],
", y = data_y, color = ", factors[1],", group = ",factors[2],"))", sep="")))
eval(parse(text=paste("p = p + geom_point(aes(shape = ", factors[2],"), size = 3)", sep="")))
}
if(!is.null(config$grCol)){
p = p + scale_fill_manual(values = config$grCol) +
scale_color_manual(values = config$gr_outline)
}
if(!is.null(config$title)){
p = p + ggtitle(config$title)
}
p = p +
geom_errorbar(aes(ymin = SE_min, ymax = SE_max),size = 0.1, width = 0.1,color="black")+
xlab(config$label_x) + ylab(config$label_y) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_blank()
)
return(p)
}
data=fromJSON(file=".[python]pre_processing/data/data2.json")
#### making dataset for e1 #################################
data=fromJSON(file="./[python]pre_processing/data/data2.json")
data=fromJSON(file="./[python]pre_processing/data/data20211124.json")
data=fromJSON(file="./[python]pre_processing/data/data20211124.json")
dat <- list((matrix(unlist(data$PDR),nrow=length(data$PDR),byrow=T)),
t(unlist(data$sub)),
t(unlist(data$condition)))
names(dat) <- c('y', 'sub', 'condition')
ind_data = makePupilDataset_mat2long(dat,c('condition','condition'),timeLen,list(g1,g2),list(go1,go2),c(f1,f2))
makePupilDataset_mat2long <- function(dat,nameOfVar, timeLen,fNum,orderName,factors){
numOfTrial = dim(dat$y)[1]
numOfSub = length(unique(dat$sub))
lengthOfTime = dim(dat$y)[2]
sTime = timeLen[1]
eTime = timeLen[2]
x = seq(sTime,eTime,length=lengthOfTime)
ind_data <- data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
data_y = t(matrix(t(dat$y),nrow=1)),
data_x = x
)
if (length(nameOfVar)  == 1){
eval(parse(text=paste("ind_data$",factors[[1]],"=",
"rep( fNum[[1]][dat$",nameOfVar[[1]],"], times = rep(lengthOfTime, numOfTrial))",
sep="")))
eval(parse(text=paste("ind_data$",factors[[1]],"<-",
"factor(ind_data$", factors[[1]],",levels = orderName[[1]])", sep="")))
# eval(parse(text=paste( varName, "= aggregate( data_y ~ sub*",
#                        factors[1,],"*data_x*",",data = ind_data, FUN = 'mean')", sep="")))
}else{
eval(parse(text=paste("ind_data$",factors[[1]],"=",
"rep( fNum[[1]][dat$", nameOfVar[[1]],"], times = rep(lengthOfTime, numOfTrial))",
sep="")))
eval(parse(text=paste("ind_data$",factors[[2]],"=",
"rep( fNum[[2]][dat$" , nameOfVar[[2]], "], times = rep(lengthOfTime, numOfTrial))",
sep="")))
eval(parse(text=paste("ind_data$",factors[[1]],"<-",
"factor(ind_data$", factors[[1]],",levels = orderName[[1]])", sep="")))
eval(parse(text=paste("ind_data$",factors[[2]],"<-",
"factor(ind_data$", factors[[2]],",levels = orderName[[2]])", sep="")))
# eval(parse(text=paste( "data_e1 = aggregate( data_y ~ sub*",
#                        factors[[1]],"*data_x*",factors[[2]], ",data = ind_data, FUN = 'mean')", sep="")))
}
return(ind_data)
# data_e1 = aggregate( data_y ~ sub*Color*Pattern*data_x, data = ind_data, FUN = "mean")
# save(data_e1,file = paste(currentLoc,"/dataset_e1.rda", sep = ""))
}
ind_data = makePupilDataset_mat2long(dat,c('condition','condition'),timeLen,list(g1,g2),list(go1,go2),c(f1,f2))
data_e1 = aggregate( . ~ sub*data_x*Locs*Pattern, data = ind_data, FUN = "mean")
save(data_e1,file = "./data/dataset20211124.rda")
1.81*2
4.62-1.81
knitr::opts_chunk$set(echo = TRUE)
countFigNum = 1
go1 <- c("Center","Upper","Lower","Left","Right")
######## file loading ########
load("./data/dataset20211124.rda")
data_e1$Locs = factor(data_e1$Locs, go1)
numOfSub = length(unique(data_e1$sub))
sTime = -0.2
eTime = max(data_e1$data_x)
anovaTabAll = list()
######## Figure 2A ########
data_e1_ave = aggregate( data_y ~ data_x*Locs*Pattern, data = data_e1, FUN = "mean")
config = list(lim_x = c(sTime, eTime),
lim_y = c(-0.5, 0.7),
alpha = 0.4,
stride = 0.1,
label_x = "Time [sec]",
label_y = "Pupil Changes [z-scored]",
title = "",
linetype = TRUE,
grCol = rep(c("#101010","#101010"),10),
gr_outline =  rep(c("#101010","#101010"),10)
)
#### file loading ####
data_e1$Locs = factor(data_e1$Locs, go1)
numOfSub = length(unique(data_e1$sub))
# data_time_center = data_e1[data_e1$Locs == 'Center',]
# peakMin = data_e1[data_e1$Locs == 'Center',]
# peakMin = aggregate( data_y ~ sub*data_x, data = peakMin, FUN = "mean")
# peakMin = aggregate( data_y ~ data_x, data = peakMin, FUN = "mean")
# peakMin_ind = peakMin[peakMin$data_y == min(peakMin$data_y),]$data_x
#
data_auc = data.frame()
for(iSub in unique(data_e1$sub)){
for(iLocs in unique(data_e1$Locs)){
for(iPattern in unique(data_e1$Pattern)){
tmp = data_e1[data_e1$sub == iSub &
data_e1$Locs == iLocs &
data_e1$Pattern == iPattern,]
tmp = tmp[tmp$data_x > tmp$minLatency[1],]
peakMin = data_e1[data_e1$sub == iSub &
data_e1$Locs == iLocs &
data_e1$Pattern == iPattern,]
peakMin =  mean(peakMin[peakMin$data_x < tmp$minLatency[1]+0.25 &
peakMin$data_x > tmp$minLatency[1]-0.25,]$data_y)
auc = 0
for(ix in 1:(length(tmp$data_x))){
auc = auc + ((tmp[ix,]$data_y-peakMin)*(1/500))
}
data_auc = rbind(data_auc,data.frame(
sub = iSub,
Locs = iLocs,
Pattern = iPattern,
data_y = c(peakMin,auc),
comp = c('Early','Late')
))
}
}
}
save(data_auc,file = "data/data_auc20211124.rda")
# load("data/data_auc.rda")
load("data/data_auc20211124.rda")
data_auc$Locs = factor(data_auc$Locs, go1)
data_center = data_auc[data_auc$Locs == 'Center',]
config = list(
alpha = 0.4,
stride = 0.1,
label_x = "",
label_y = "Pupil Changes [z-score]",
title = "",
grCol = rep(c("white","black"),5),
gr_outline =  rep(c("black","black"),5)
)
#### Figure 3A (center early) ####
p <- dispLineGraph(data_center[data_center$comp == 'Early',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Early')
config$ylim = round(seq(-0.5,0,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Figure 3A (late early) ####
config$label_y = "AUC [z-score]"
p <- dispLineGraph(data_center[data_center$comp == 'Late',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Late')
config$ylim = round(seq(0.5,1.5,0.5),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Figure 3BC ####
data_auc = data_auc[data_auc$Locs != 'Center',]
config$label_y = "Pupil Changes [z-score]"
p <- dispLineGraph(data_auc[data_auc$comp == 'Early',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Early')
config$ylim = round(seq(-0.2,0.2,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Figure 3B ####
config$label_y = "AUC [z-score]"
p <- dispLineGraph(data_auc[data_auc$comp == 'Late',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Late(AUC)')
config$ylim = round(seq(0,1.2,0.2),2)
config$ylim_stride = 0.15
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
data_anova = data_auc[data_auc$comp == 'Early',]
data_anova$comp = NULL
anovakun(data_anova,"sAB",long=T, peta=T, gg=T)
data_anova_Early = list(list(
anovaTab = forDrawingSigANOVA,
post = forDrawingPost[["A"]][["bontab"]]
# bf = round(exp(numOfTrial_BF@bayesFactor[["bf"]]),3)
))
# names(numOfTrial) <- c('numOfTrial')
# anovaTabAll_e1 = c(anovaTabAll_e1,numOfTrial)
fig3a_anovatable = forDrawingSigANOVA
fig3a_ttest = forDrawingPost[["A"]][["bontab"]]
fig3a_inter = forDrawingPost[["A:B"]][["simtab"]]
data_anova = data_auc[data_auc$comp == 'Late',]
data_anova$comp = NULL
anovakun(data_anova,"sAB",long=T, peta=T, gg=T)
fig3b_anovatable = forDrawingSigANOVA
fig3b_ttest = forDrawingPost[["A"]][["bontab"]]
fig3b_inter = forDrawingPost[["A:B"]][["simtab"]]
View(data_anova_Early)
View(data_anova)
data_anova_Early_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
data_anova$Locs = factor(data_anova$Locs,levels = unique(data_anova$Locs))
data_anova$Pattern = factor(data_anova$Pattern,levels = unique(data_anova$Pattern))
data_anova$sub = factor(data_anova$sub,levels = unique(data_anova$sub))
data_anova_Early_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
data_anova_Early_BF = round(exp(data_anova_Early_BF@bayesFactor[["bf"]]),3)
View(data_anova_Early)
data_anova_Early_BF
data_anova_Early_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
data_anova_Early = list(list(
anovaTab = forDrawingSigANOVA,
post = forDrawingPost[["A"]][["bontab"]],
bf = round(exp(data_anova_Early_BF@bayesFactor[["bf"]]),3)
))
data_anova_Early_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
data_anova_Early = list(list(
anovaTab = forDrawingSigANOVA,
post = forDrawingPost[["A"]][["bontab"]],
bf = round(exp(data_anova_Early_BF@bayesFactor[["bf"]]),3)
))
View(data_anova_Early)
names(data_anova_Early) <- c('data_anova_Early')
anovaTabAll_e1 = c(anovaTabAll,data_anova_Early)
names(data_anova_Early) <- c('data_anova_Early')
anovaTabAll = c(anovaTabAll,data_anova_Early)
View(anovaTabAll)
fig3a_anovatable = forDrawingSigANOVA
fig3a_anovatable
View(fig3a_anovatable)
data_anova = data_auc[data_auc$comp == 'Early',]
data_anova$comp = NULL
anovakun(data_anova,"sAB",long=T, peta=T, gg=T)
data_anova$Locs = factor(data_anova$Locs,levels = unique(data_anova$Locs))
data_anova$Pattern = factor(data_anova$Pattern,levels = unique(data_anova$Pattern))
data_anova$sub = factor(data_anova$sub,levels = unique(data_anova$sub))
data_anova_Early_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
# data_anova_Early_BF = round(exp(data_anova_Early_BF@bayesFactor[["bf"]]),3)
data_anova_Early = list(list(
anovaTab = forDrawingSigANOVA,
post = forDrawingPost[["A"]][["bontab"]],
bf = round(exp(data_anova_Early_BF@bayesFactor[["bf"]]),3)
))
names(data_anova_Early) <- c('data_anova_Early')
anovaTabAll = c(anovaTabAll,data_anova_Early)
fig3a_anovatable = forDrawingSigANOVA
data_anova = data_auc[data_auc$comp == 'Late',]
data_anova$comp = NULL
anovakun(data_anova,"sAB",long=T, peta=T, gg=T)
fig3b_anovatable = forDrawingSigANOVA
fig3b_inter
View(fig3a_ttest)
View(fig3a_inter)
anovaTabAll
View(anovaTabAll)
countFigNum = 1
go1 <- c("Center","Upper","Lower","Left","Right")
######## file loading ########
load("./data/dataset20211124.rda")
data_e1$Locs = factor(data_e1$Locs, go1)
numOfSub = length(unique(data_e1$sub))
sTime = -0.2
eTime = max(data_e1$data_x)
anovaTabAll = list()
######## Figure 2A ########
data_e1_ave = aggregate( data_y ~ data_x*Locs*Pattern, data = data_e1, FUN = "mean")
config = list(lim_x = c(sTime, eTime),
lim_y = c(-0.5, 0.7),
alpha = 0.4,
stride = 0.1,
label_x = "Time [sec]",
label_y = "Pupil Changes [z-scored]",
title = "",
linetype = TRUE,
grCol = rep(c("#101010","#101010"),10),
gr_outline =  rep(c("#101010","#101010"),10)
)
#### file loading ####
data_e1$Locs = factor(data_e1$Locs, go1)
numOfSub = length(unique(data_e1$sub))
# data_auc = data.frame()
# for(iSub in unique(data_e1$sub)){
#   for(iLocs in unique(data_e1$Locs)){
#     for(iPattern in unique(data_e1$Pattern)){
#       tmp = data_e1[data_e1$sub == iSub &
#                       data_e1$Locs == iLocs &
#                       data_e1$Pattern == iPattern,]
#       tmp = tmp[tmp$data_x > tmp$minLatency[1],]
#
#       peakMin = data_e1[data_e1$sub == iSub &
#                           data_e1$Locs == iLocs &
#                           data_e1$Pattern == iPattern,]
#       peakMin =  mean(peakMin[peakMin$data_x < tmp$minLatency[1]+0.25 &
#                                 peakMin$data_x > tmp$minLatency[1]-0.25,]$data_y)
#       auc = 0
#       for(ix in 1:(length(tmp$data_x))){
#         auc = auc + ((tmp[ix,]$data_y-peakMin)*(1/500))
#       }
#       data_auc = rbind(data_auc,data.frame(
#         sub = iSub,
#         Locs = iLocs,
#         Pattern = iPattern,
#         data_y = c(peakMin,auc),
#         comp = c('Early','Late')
#       ))
#     }
#   }
# }
#
# save(data_auc,file = "data/data_auc20211124.rda")
# load("data/data_auc.rda")
load("data/data_auc20211124.rda")
data_auc$Locs = factor(data_auc$Locs, go1)
data_center = data_auc[data_auc$Locs == 'Center',]
config = list(
alpha = 0.4,
stride = 0.1,
label_x = "",
label_y = "Pupil Changes [z-score]",
title = "",
grCol = rep(c("white","black"),5),
gr_outline =  rep(c("black","black"),5)
)
#### Figure 3A (center early) ####
p <- dispLineGraph(data_center[data_center$comp == 'Early',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Early')
config$ylim = round(seq(-0.5,0,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Figure 3A (late early) ####
config$label_y = "AUC [z-score]"
p <- dispLineGraph(data_center[data_center$comp == 'Late',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Late')
config$ylim = round(seq(0.5,1.5,0.5),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Figure 3BC ####
data_auc = data_auc[data_auc$Locs != 'Center',]
config$label_y = "Pupil Changes [z-score]"
p <- dispLineGraph(data_auc[data_auc$comp == 'Early',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Early')
config$ylim = round(seq(-0.2,0.2,0.1),2)
config$ylim_stride = 0.05
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Figure 3B ####
config$label_y = "AUC [z-score]"
p <- dispLineGraph(data_auc[data_auc$comp == 'Late',],config,c("Locs","Pattern"))+
facet_grid(. ~ Locs)+
ggtitle('Late(AUC)')
config$ylim = round(seq(0,1.2,0.2),2)
config$ylim_stride = 0.15
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x = element_blank()
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
#### Early component ANOVA ####
data_anova = data_auc[data_auc$comp == 'Early',]
data_anova$comp = NULL
anovakun(data_anova,"sAB",long=T, peta=T, gg=T)
data_anova$Locs = factor(data_anova$Locs,levels = unique(data_anova$Locs))
data_anova$Pattern = factor(data_anova$Pattern,levels = unique(data_anova$Pattern))
data_anova$sub = factor(data_anova$sub,levels = unique(data_anova$sub))
data_anova_Early_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
fig3a_anovatable = forDrawingSigANOVA
fig3a_ttest = forDrawingPost[["A"]][["bontab"]]
fig3a_inter = forDrawingPost[["A:B"]][["simtab"]]
data_anova_Early = list(list(
anovaTab = forDrawingSigANOVA,
post = forDrawingPost[["A"]][["bontab"]],
bf = round(exp(data_anova_Early_BF@bayesFactor[["bf"]]),3),
fig3a_ttest = fig3a_ttest,
fig3a_inter = fig3a_inter
))
names(data_anova_Early) <- c('data_anova_Early')
anovaTabAll = c(anovaTabAll,data_anova_Early)
#### Late component ANOVA ####
data_anova = data_auc[data_auc$comp == 'Late',]
data_anova$comp = NULL
anovakun(data_anova,"sAB",long=T, peta=T, gg=T)
data_anova$Locs = factor(data_anova$Locs,levels = unique(data_anova$Locs))
data_anova$Pattern = factor(data_anova$Pattern,levels = unique(data_anova$Pattern))
data_anova$sub = factor(data_anova$sub,levels = unique(data_anova$sub))
data_anova_Late_BF = anovaBF(data_y ~ Locs*Pattern + sub, data=data_anova, whichRandom = "sub")
fig3b_anovatable = forDrawingSigANOVA
fig3b_ttest = forDrawingPost[["A"]][["bontab"]]
fig3b_inter = forDrawingPost[["A:B"]][["simtab"]]
data_anova_Late = list(list(
anovaTab = forDrawingSigANOVA,
post = forDrawingPost[["A"]][["bontab"]],
bf = round(exp(data_anova_Late_BF@bayesFactor[["bf"]]),3),
fig3b_ttest = fig3b_ttest,
fig3b_inter = fig3b_inter
))
names(data_anova_Late) <- c('data_anova_Late')
anovaTabAll = c(anovaTabAll,data_anova_Late)
View(anovaTabAll)
anovaTabAll["data_anova_Early"]
anovaTabAll["data_anova_Early"]["anovaTabAll"]
anovaTabAll[["data_anova_Early"]][["anovaTab"]]
anovaTabAll[["data_anova_Early"]][["bf"]][1]
anovaTabAll[["data_anova_Early"]][["bf"]]
anovaTabAll[["data_anova_Early"]][["anovaTab"]]
anovaTabAll[["data_anova_Early"]][["bf"]]
install.packages(c("animation", "backports", "bayesplot", "bayestestR", "BH", "boot", "broom", "Cairo", "callr", "car", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "DEoptim", "desc", "devtools", "digest", "dplyr", "DT", "dtw", "effectsize", "ellipsis", "EMAtools", "emmeans", "expm", "fansi", "farver", "fastICA", "forcats", "foreign", "fs", "generics", "GGally", "gganimate", "ggmcmc", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "gifski", "git2r", "glue", "gsl", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "influenceR", "inline", "insight", "isoband", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lmerTest", "loo", "magick", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "MPDiR", "msm", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "processx", "promises", "proxy", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "RcppEigen", "RcppParallel", "readr", "remotes", "rex", "rio", "rlang", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rversions", "sandwich", "sessioninfo", "sjlabelled", "sjmisc", "sjstats", "sp", "SparseM", "spatial", "StanHeaders", "statmod", "stringi", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tweenr", "usethis", "utf8", "V8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "zip", "zoo"))
install.packages(c("animation", "backports", "bayesplot", "bayestestR", "BH", "boot", "broom", "Cairo", "callr", "car", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "DEoptim", "desc", "devtools", "digest", "dplyr", "DT", "dtw", "effectsize", "ellipsis", "EMAtools", "emmeans", "expm", "fansi", "farver", "fastICA", "forcats", "foreign", "fs", "generics", "GGally", "gganimate", "ggmcmc", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "gifski", "git2r", "glue", "gsl", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "influenceR", "inline", "insight", "isoband", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lmerTest", "loo", "magick", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "MPDiR", "msm", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "processx", "promises", "proxy", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "RcppEigen", "RcppParallel", "readr", "remotes", "rex", "rio", "rlang", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rversions", "sandwich", "sessioninfo", "sjlabelled", "sjmisc", "sjstats", "sp", "SparseM", "spatial", "StanHeaders", "statmod", "stringi", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tweenr", "usethis", "utf8", "V8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "zip", "zoo"))
install.packages(c("animation", "backports", "bayesplot", "bayestestR", "BH", "boot", "broom", "Cairo", "callr", "car", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "DEoptim", "desc", "devtools", "digest", "dplyr", "DT", "dtw", "effectsize", "ellipsis", "EMAtools", "emmeans", "expm", "fansi", "farver", "fastICA", "forcats", "foreign", "fs", "generics", "GGally", "gganimate", "ggmcmc", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "gifski", "git2r", "glue", "gsl", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "influenceR", "inline", "insight", "isoband", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lmerTest", "loo", "magick", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "MPDiR", "msm", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "processx", "promises", "proxy", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "RcppEigen", "RcppParallel", "readr", "remotes", "rex", "rio", "rlang", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rversions", "sandwich", "sessioninfo", "sjlabelled", "sjmisc", "sjstats", "sp", "SparseM", "spatial", "StanHeaders", "statmod", "stringi", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tweenr", "usethis", "utf8", "V8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "zip", "zoo"))
install.packages(c("animation", "backports", "bayesplot", "bayestestR", "BH", "boot", "broom", "Cairo", "callr", "car", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "DEoptim", "desc", "devtools", "digest", "dplyr", "DT", "dtw", "effectsize", "ellipsis", "EMAtools", "emmeans", "expm", "fansi", "farver", "fastICA", "forcats", "foreign", "fs", "generics", "GGally", "gganimate", "ggmcmc", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "gifski", "git2r", "glue", "gsl", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "influenceR", "inline", "insight", "isoband", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lmerTest", "loo", "magick", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "MPDiR", "msm", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "processx", "promises", "proxy", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "RcppEigen", "RcppParallel", "readr", "remotes", "rex", "rio", "rlang", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rversions", "sandwich", "sessioninfo", "sjlabelled", "sjmisc", "sjstats", "sp", "SparseM", "spatial", "StanHeaders", "statmod", "stringi", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tweenr", "usethis", "utf8", "V8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "zip", "zoo"))
install.packages(c("animation", "backports", "bayesplot", "bayestestR", "BH", "boot", "broom", "Cairo", "callr", "car", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "corrplot", "covr", "cowplot", "crayon", "crosstalk", "curl", "data.table", "DEoptim", "desc", "devtools", "digest", "dplyr", "DT", "dtw", "effectsize", "ellipsis", "EMAtools", "emmeans", "expm", "fansi", "farver", "fastICA", "forcats", "foreign", "fs", "generics", "GGally", "gganimate", "ggmcmc", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh", "gifski", "git2r", "glue", "gsl", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httr", "igraph", "influenceR", "inline", "insight", "isoband", "iterators", "jpeg", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lme4", "lmerTest", "loo", "magick", "magrittr", "maptools", "MASS", "Matrix", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "MPDiR", "msm", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parameters", "pbkrtest", "performance", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "processx", "promises", "proxy", "ps", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "RcppEigen", "RcppParallel", "readr", "remotes", "rex", "rio", "rlang", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rversions", "sandwich", "sessioninfo", "sjlabelled", "sjmisc", "sjstats", "sp", "SparseM", "spatial", "StanHeaders", "statmod", "stringi", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tweenr", "usethis", "utf8", "V8", "vctrs", "viridis", "viridisLite", "visNetwork", "withr", "zip", "zoo"))
knit_with_parameters('~/Desktop/Github/GlarePupilAnisotropy/[Rmd]Results/figure.Rmd')
knit_with_parameters('~/Desktop/Github/GlarePupilAnisotropy/[Rmd]Results/figure.Rmd')
anovaTabAll[["data_anova_Early"]][["fig3a_ttest"]]
novaTabAll[["data_anova_Early"]][["fig3a_inter"]]
anovaTabAll[["data_anova_Early"]][["fig3a_inter"]]
anovaTabAll[["data_anova_Late"]][["fig3b_ttest"]]
install.packages(c("brio", "cpp11", "credentials", "devtools", "digest", "emmeans", "fs", "glue", "pkgbuild", "pkgload", "readr", "remotes", "sessioninfo", "sjmisc", "stringi", "testthat", "vroom", "withr", "xml2"))
version
